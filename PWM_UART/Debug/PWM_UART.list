
PWM_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020b0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002170  08002170  00003170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021a0  080021a0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080021a0  080021a0  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021a0  080021a0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021a0  080021a0  000031a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021a4  080021a4  000031a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080021a8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  080021b4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080021b4  00004094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071a2  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000143d  00000000  00000000  0000b1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000c618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b5  00000000  00000000  0000cec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ebdc  00000000  00000000  0000d575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bf9  00000000  00000000  0001c151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005bcc5  00000000  00000000  00025d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00081a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ed8  00000000  00000000  00081a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0008392c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002158 	.word	0x08002158

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002158 	.word	0x08002158

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa10 	bl	8000648 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f840 	bl	80002ac <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f900 	bl	8000430 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000230:	f000 f87e 	bl	8000330 <MX_TIM3_Init>

  //Inicia o PWM
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000234:	4b1a      	ldr	r3, [pc, #104]	@ (80002a0 <main+0x80>)
 8000236:	2100      	movs	r1, #0
 8000238:	0018      	movs	r0, r3
 800023a:	f001 f9b7 	bl	80015ac <HAL_TIM_PWM_Start>
  sConfigOC.Pulse = 0; //Duty Cycle começando em 0%
 800023e:	4b19      	ldr	r3, [pc, #100]	@ (80002a4 <main+0x84>)
 8000240:	2200      	movs	r2, #0
 8000242:	605a      	str	r2, [r3, #4]

  while (1)
  {
	  	//Controle por flag que só registra 1 pressionamento após o botão ser pressionado
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 8000244:	2390      	movs	r3, #144	@ 0x90
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	2101      	movs	r1, #1
 800024a:	0018      	movs	r0, r3
 800024c:	f000 fca8 	bl	8000ba0 <HAL_GPIO_ReadPin>
 8000250:	1e03      	subs	r3, r0, #0
 8000252:	d021      	beq.n	8000298 <main+0x78>

			if (botao_pressionado == 0){ //Só registra o evento 1 vez, ou seja,
 8000254:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <main+0x88>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d1f3      	bne.n	8000244 <main+0x24>

				HAL_Delay(20); //Debounce
 800025c:	2014      	movs	r0, #20
 800025e:	f000 fa57 	bl	8000710 <HAL_Delay>

				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){ //Confirma o estado do botão
 8000262:	2390      	movs	r3, #144	@ 0x90
 8000264:	05db      	lsls	r3, r3, #23
 8000266:	2101      	movs	r1, #1
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fc99 	bl	8000ba0 <HAL_GPIO_ReadPin>
 800026e:	1e03      	subs	r3, r0, #0
 8000270:	d0e8      	beq.n	8000244 <main+0x24>

					botao_pressionado = 1;
 8000272:	4b0d      	ldr	r3, [pc, #52]	@ (80002a8 <main+0x88>)
 8000274:	2201      	movs	r2, #1
 8000276:	701a      	strb	r2, [r3, #0]
					sConfigOC.Pulse += 111; //Incrementa o Duty Cycle em 20%
 8000278:	4b0a      	ldr	r3, [pc, #40]	@ (80002a4 <main+0x84>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	336f      	adds	r3, #111	@ 0x6f
 800027e:	001a      	movs	r2, r3
 8000280:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <main+0x84>)
 8000282:	605a      	str	r2, [r3, #4]

					//Reseta o Duty Cycle ao passar de 100%
					if(sConfigOC.Pulse > 555){
 8000284:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <main+0x84>)
 8000286:	685a      	ldr	r2, [r3, #4]
 8000288:	238b      	movs	r3, #139	@ 0x8b
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	429a      	cmp	r2, r3
 800028e:	d3d9      	bcc.n	8000244 <main+0x24>

						sConfigOC.Pulse = 0;
 8000290:	4b04      	ldr	r3, [pc, #16]	@ (80002a4 <main+0x84>)
 8000292:	2200      	movs	r2, #0
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	e7d5      	b.n	8000244 <main+0x24>
				}
			}
		}

		else{
			botao_pressionado = 0;
 8000298:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <main+0x88>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 800029e:	e7d1      	b.n	8000244 <main+0x24>
 80002a0:	20000028 	.word	0x20000028
 80002a4:	20000070 	.word	0x20000070
 80002a8:	2000008c 	.word	0x2000008c

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b091      	sub	sp, #68	@ 0x44
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	2410      	movs	r4, #16
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	0018      	movs	r0, r3
 80002b8:	2330      	movs	r3, #48	@ 0x30
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f001 ff1f 	bl	8002100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c2:	003b      	movs	r3, r7
 80002c4:	0018      	movs	r0, r3
 80002c6:	2310      	movs	r3, #16
 80002c8:	001a      	movs	r2, r3
 80002ca:	2100      	movs	r1, #0
 80002cc:	f001 ff18 	bl	8002100 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d0:	0021      	movs	r1, r4
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2202      	movs	r2, #2
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2201      	movs	r2, #1
 80002dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2210      	movs	r2, #16
 80002e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2200      	movs	r2, #0
 80002e8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f000 fc75 	bl	8000bdc <HAL_RCC_OscConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002f6:	f000 f8d9 	bl	80004ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	003b      	movs	r3, r7
 80002fc:	2207      	movs	r2, #7
 80002fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000300:	003b      	movs	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000306:	003b      	movs	r3, r7
 8000308:	22b0      	movs	r2, #176	@ 0xb0
 800030a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030c:	003b      	movs	r3, r7
 800030e:	2280      	movs	r2, #128	@ 0x80
 8000310:	00d2      	lsls	r2, r2, #3
 8000312:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000314:	003b      	movs	r3, r7
 8000316:	2100      	movs	r1, #0
 8000318:	0018      	movs	r0, r3
 800031a:	f000 ff79 	bl	8001210 <HAL_RCC_ClockConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000322:	f000 f8c3 	bl	80004ac <Error_Handler>
  }
}
 8000326:	46c0      	nop			@ (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	b011      	add	sp, #68	@ 0x44
 800032c:	bd90      	pop	{r4, r7, pc}
	...

08000330 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08e      	sub	sp, #56	@ 0x38
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000336:	2328      	movs	r3, #40	@ 0x28
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	0018      	movs	r0, r3
 800033c:	2310      	movs	r3, #16
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f001 fedd 	bl	8002100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000346:	2320      	movs	r3, #32
 8000348:	18fb      	adds	r3, r7, r3
 800034a:	0018      	movs	r0, r3
 800034c:	2308      	movs	r3, #8
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f001 fed5 	bl	8002100 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	0018      	movs	r0, r3
 800035a:	231c      	movs	r3, #28
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f001 fece 	bl	8002100 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000364:	4b2f      	ldr	r3, [pc, #188]	@ (8000424 <MX_TIM3_Init+0xf4>)
 8000366:	4a30      	ldr	r2, [pc, #192]	@ (8000428 <MX_TIM3_Init+0xf8>)
 8000368:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800036a:	4b2e      	ldr	r3, [pc, #184]	@ (8000424 <MX_TIM3_Init+0xf4>)
 800036c:	2200      	movs	r2, #0
 800036e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	4b2c      	ldr	r3, [pc, #176]	@ (8000424 <MX_TIM3_Init+0xf4>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 555;
 8000376:	4b2b      	ldr	r3, [pc, #172]	@ (8000424 <MX_TIM3_Init+0xf4>)
 8000378:	4a2c      	ldr	r2, [pc, #176]	@ (800042c <MX_TIM3_Init+0xfc>)
 800037a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037c:	4b29      	ldr	r3, [pc, #164]	@ (8000424 <MX_TIM3_Init+0xf4>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000382:	4b28      	ldr	r3, [pc, #160]	@ (8000424 <MX_TIM3_Init+0xf4>)
 8000384:	2280      	movs	r2, #128	@ 0x80
 8000386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000388:	4b26      	ldr	r3, [pc, #152]	@ (8000424 <MX_TIM3_Init+0xf4>)
 800038a:	0018      	movs	r0, r3
 800038c:	f001 f866 	bl	800145c <HAL_TIM_Base_Init>
 8000390:	1e03      	subs	r3, r0, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000394:	f000 f88a 	bl	80004ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000398:	2128      	movs	r1, #40	@ 0x28
 800039a:	187b      	adds	r3, r7, r1
 800039c:	2280      	movs	r2, #128	@ 0x80
 800039e:	0152      	lsls	r2, r2, #5
 80003a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003a2:	187a      	adds	r2, r7, r1
 80003a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000424 <MX_TIM3_Init+0xf4>)
 80003a6:	0011      	movs	r1, r2
 80003a8:	0018      	movs	r0, r3
 80003aa:	f001 fa6b 	bl	8001884 <HAL_TIM_ConfigClockSource>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80003b2:	f000 f87b 	bl	80004ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000424 <MX_TIM3_Init+0xf4>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f001 f89f 	bl	80014fc <HAL_TIM_PWM_Init>
 80003be:	1e03      	subs	r3, r0, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80003c2:	f000 f873 	bl	80004ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c6:	2120      	movs	r1, #32
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2200      	movs	r2, #0
 80003d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003d4:	187a      	adds	r2, r7, r1
 80003d6:	4b13      	ldr	r3, [pc, #76]	@ (8000424 <MX_TIM3_Init+0xf4>)
 80003d8:	0011      	movs	r1, r2
 80003da:	0018      	movs	r0, r3
 80003dc:	f001 fe3e 	bl	800205c <HAL_TIMEx_MasterConfigSynchronization>
 80003e0:	1e03      	subs	r3, r0, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80003e4:	f000 f862 	bl	80004ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2260      	movs	r2, #96	@ 0x60
 80003ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000400:	1d39      	adds	r1, r7, #4
 8000402:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <MX_TIM3_Init+0xf4>)
 8000404:	2200      	movs	r2, #0
 8000406:	0018      	movs	r0, r3
 8000408:	f001 f976 	bl	80016f8 <HAL_TIM_PWM_ConfigChannel>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000410:	f000 f84c 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000414:	4b03      	ldr	r3, [pc, #12]	@ (8000424 <MX_TIM3_Init+0xf4>)
 8000416:	0018      	movs	r0, r3
 8000418:	f000 f890 	bl	800053c <HAL_TIM_MspPostInit>

}
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b00e      	add	sp, #56	@ 0x38
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000028 	.word	0x20000028
 8000428:	40000400 	.word	0x40000400
 800042c:	0000022b 	.word	0x0000022b

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b089      	sub	sp, #36	@ 0x24
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	240c      	movs	r4, #12
 8000438:	193b      	adds	r3, r7, r4
 800043a:	0018      	movs	r0, r3
 800043c:	2314      	movs	r3, #20
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f001 fe5d 	bl	8002100 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000446:	4b18      	ldr	r3, [pc, #96]	@ (80004a8 <MX_GPIO_Init+0x78>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b17      	ldr	r3, [pc, #92]	@ (80004a8 <MX_GPIO_Init+0x78>)
 800044c:	2180      	movs	r1, #128	@ 0x80
 800044e:	03c9      	lsls	r1, r1, #15
 8000450:	430a      	orrs	r2, r1
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <MX_GPIO_Init+0x78>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	2380      	movs	r3, #128	@ 0x80
 800045a:	03db      	lsls	r3, r3, #15
 800045c:	4013      	ands	r3, r2
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <MX_GPIO_Init+0x78>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b10      	ldr	r3, [pc, #64]	@ (80004a8 <MX_GPIO_Init+0x78>)
 8000468:	2180      	movs	r1, #128	@ 0x80
 800046a:	0289      	lsls	r1, r1, #10
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <MX_GPIO_Init+0x78>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	@ 0x80
 8000476:	029b      	lsls	r3, r3, #10
 8000478:	4013      	ands	r3, r2
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2201      	movs	r2, #1
 8000482:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2200      	movs	r2, #0
 8000488:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	193a      	adds	r2, r7, r4
 8000492:	2390      	movs	r3, #144	@ 0x90
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fa11 	bl	80008c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b009      	add	sp, #36	@ 0x24
 80004a4:	bd90      	pop	{r4, r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	e7fd      	b.n	80004b4 <Error_Handler+0x8>

080004b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <HAL_MspInit+0x44>)
 80004c0:	699a      	ldr	r2, [r3, #24]
 80004c2:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <HAL_MspInit+0x44>)
 80004c4:	2101      	movs	r1, #1
 80004c6:	430a      	orrs	r2, r1
 80004c8:	619a      	str	r2, [r3, #24]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <HAL_MspInit+0x44>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	2201      	movs	r2, #1
 80004d0:	4013      	ands	r3, r2
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <HAL_MspInit+0x44>)
 80004d8:	69da      	ldr	r2, [r3, #28]
 80004da:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <HAL_MspInit+0x44>)
 80004dc:	2180      	movs	r1, #128	@ 0x80
 80004de:	0549      	lsls	r1, r1, #21
 80004e0:	430a      	orrs	r2, r1
 80004e2:	61da      	str	r2, [r3, #28]
 80004e4:	4b05      	ldr	r3, [pc, #20]	@ (80004fc <HAL_MspInit+0x44>)
 80004e6:	69da      	ldr	r2, [r3, #28]
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	055b      	lsls	r3, r3, #21
 80004ec:	4013      	ands	r3, r2
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000

08000500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a09      	ldr	r2, [pc, #36]	@ (8000534 <HAL_TIM_Base_MspInit+0x34>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d10b      	bne.n	800052a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <HAL_TIM_Base_MspInit+0x38>)
 8000514:	69da      	ldr	r2, [r3, #28]
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <HAL_TIM_Base_MspInit+0x38>)
 8000518:	2102      	movs	r1, #2
 800051a:	430a      	orrs	r2, r1
 800051c:	61da      	str	r2, [r3, #28]
 800051e:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <HAL_TIM_Base_MspInit+0x38>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	2202      	movs	r2, #2
 8000524:	4013      	ands	r3, r2
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b004      	add	sp, #16
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	40000400 	.word	0x40000400
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b089      	sub	sp, #36	@ 0x24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	240c      	movs	r4, #12
 8000546:	193b      	adds	r3, r7, r4
 8000548:	0018      	movs	r0, r3
 800054a:	2314      	movs	r3, #20
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f001 fdd6 	bl	8002100 <memset>
  if(htim->Instance==TIM3)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a15      	ldr	r2, [pc, #84]	@ (80005b0 <HAL_TIM_MspPostInit+0x74>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d124      	bne.n	80005a8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <HAL_TIM_MspPostInit+0x78>)
 8000560:	695a      	ldr	r2, [r3, #20]
 8000562:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <HAL_TIM_MspPostInit+0x78>)
 8000564:	2180      	movs	r1, #128	@ 0x80
 8000566:	0289      	lsls	r1, r1, #10
 8000568:	430a      	orrs	r2, r1
 800056a:	615a      	str	r2, [r3, #20]
 800056c:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <HAL_TIM_MspPostInit+0x78>)
 800056e:	695a      	ldr	r2, [r3, #20]
 8000570:	2380      	movs	r3, #128	@ 0x80
 8000572:	029b      	lsls	r3, r3, #10
 8000574:	4013      	ands	r3, r2
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800057a:	0021      	movs	r1, r4
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2240      	movs	r2, #64	@ 0x40
 8000580:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2202      	movs	r2, #2
 8000586:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2201      	movs	r2, #1
 8000598:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059a:	187a      	adds	r2, r7, r1
 800059c:	2390      	movs	r3, #144	@ 0x90
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	0011      	movs	r1, r2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 f98c 	bl	80008c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b009      	add	sp, #36	@ 0x24
 80005ae:	bd90      	pop	{r4, r7, pc}
 80005b0:	40000400 	.word	0x40000400
 80005b4:	40021000 	.word	0x40021000

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	e7fd      	b.n	80005bc <NMI_Handler+0x4>

080005c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	e7fd      	b.n	80005c4 <HardFault_Handler+0x4>

080005c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e0:	f000 f87a 	bl	80006d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e4:	46c0      	nop			@ (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	@ (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f7ff fff7 	bl	80005ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	@ (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	@ (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000622:	f001 fd75 	bl	8002110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000626:	f7ff fdfb 	bl	8000220 <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000638:	080021a8 	.word	0x080021a8
  ldr r2, =_sbss
 800063c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000640:	20000094 	.word	0x20000094

08000644 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_IRQHandler>
	...

08000648 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <HAL_Init+0x24>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <HAL_Init+0x24>)
 8000652:	2110      	movs	r1, #16
 8000654:	430a      	orrs	r2, r1
 8000656:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f809 	bl	8000670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800065e:	f7ff ff2b 	bl	80004b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
}
 8000664:	0018      	movs	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	40022000 	.word	0x40022000

08000670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <HAL_InitTick+0x5c>)
 800067a:	681c      	ldr	r4, [r3, #0]
 800067c:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <HAL_InitTick+0x60>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	0019      	movs	r1, r3
 8000682:	23fa      	movs	r3, #250	@ 0xfa
 8000684:	0098      	lsls	r0, r3, #2
 8000686:	f7ff fd3f 	bl	8000108 <__udivsi3>
 800068a:	0003      	movs	r3, r0
 800068c:	0019      	movs	r1, r3
 800068e:	0020      	movs	r0, r4
 8000690:	f7ff fd3a 	bl	8000108 <__udivsi3>
 8000694:	0003      	movs	r3, r0
 8000696:	0018      	movs	r0, r3
 8000698:	f000 f905 	bl	80008a6 <HAL_SYSTICK_Config>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006a0:	2301      	movs	r3, #1
 80006a2:	e00f      	b.n	80006c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b03      	cmp	r3, #3
 80006a8:	d80b      	bhi.n	80006c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	2301      	movs	r3, #1
 80006ae:	425b      	negs	r3, r3
 80006b0:	2200      	movs	r2, #0
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 f8e2 	bl	800087c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <HAL_InitTick+0x64>)
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80006be:	2300      	movs	r3, #0
 80006c0:	e000      	b.n	80006c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b003      	add	sp, #12
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000004 	.word	0x20000004

080006d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <HAL_IncTick+0x1c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	001a      	movs	r2, r3
 80006e2:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <HAL_IncTick+0x20>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	18d2      	adds	r2, r2, r3
 80006e8:	4b03      	ldr	r3, [pc, #12]	@ (80006f8 <HAL_IncTick+0x20>)
 80006ea:	601a      	str	r2, [r3, #0]
}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	20000008 	.word	0x20000008
 80006f8:	20000090 	.word	0x20000090

080006fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	@ (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	20000090 	.word	0x20000090

08000710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000718:	f7ff fff0 	bl	80006fc <HAL_GetTick>
 800071c:	0003      	movs	r3, r0
 800071e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	d005      	beq.n	8000736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800072a:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <HAL_Delay+0x44>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	001a      	movs	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	189b      	adds	r3, r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	f7ff ffe0 	bl	80006fc <HAL_GetTick>
 800073c:	0002      	movs	r2, r0
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	68fa      	ldr	r2, [r7, #12]
 8000744:	429a      	cmp	r2, r3
 8000746:	d8f7      	bhi.n	8000738 <HAL_Delay+0x28>
  {
  }
}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b004      	add	sp, #16
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	20000008 	.word	0x20000008

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	0002      	movs	r2, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b7f      	cmp	r3, #127	@ 0x7f
 800076c:	d828      	bhi.n	80007c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800076e:	4a2f      	ldr	r2, [pc, #188]	@ (800082c <__NVIC_SetPriority+0xd4>)
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b25b      	sxtb	r3, r3
 8000776:	089b      	lsrs	r3, r3, #2
 8000778:	33c0      	adds	r3, #192	@ 0xc0
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	589b      	ldr	r3, [r3, r2]
 800077e:	1dfa      	adds	r2, r7, #7
 8000780:	7812      	ldrb	r2, [r2, #0]
 8000782:	0011      	movs	r1, r2
 8000784:	2203      	movs	r2, #3
 8000786:	400a      	ands	r2, r1
 8000788:	00d2      	lsls	r2, r2, #3
 800078a:	21ff      	movs	r1, #255	@ 0xff
 800078c:	4091      	lsls	r1, r2
 800078e:	000a      	movs	r2, r1
 8000790:	43d2      	mvns	r2, r2
 8000792:	401a      	ands	r2, r3
 8000794:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	019b      	lsls	r3, r3, #6
 800079a:	22ff      	movs	r2, #255	@ 0xff
 800079c:	401a      	ands	r2, r3
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	0018      	movs	r0, r3
 80007a4:	2303      	movs	r3, #3
 80007a6:	4003      	ands	r3, r0
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ac:	481f      	ldr	r0, [pc, #124]	@ (800082c <__NVIC_SetPriority+0xd4>)
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	089b      	lsrs	r3, r3, #2
 80007b6:	430a      	orrs	r2, r1
 80007b8:	33c0      	adds	r3, #192	@ 0xc0
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007be:	e031      	b.n	8000824 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000830 <__NVIC_SetPriority+0xd8>)
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	0019      	movs	r1, r3
 80007c8:	230f      	movs	r3, #15
 80007ca:	400b      	ands	r3, r1
 80007cc:	3b08      	subs	r3, #8
 80007ce:	089b      	lsrs	r3, r3, #2
 80007d0:	3306      	adds	r3, #6
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	18d3      	adds	r3, r2, r3
 80007d6:	3304      	adds	r3, #4
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	1dfa      	adds	r2, r7, #7
 80007dc:	7812      	ldrb	r2, [r2, #0]
 80007de:	0011      	movs	r1, r2
 80007e0:	2203      	movs	r2, #3
 80007e2:	400a      	ands	r2, r1
 80007e4:	00d2      	lsls	r2, r2, #3
 80007e6:	21ff      	movs	r1, #255	@ 0xff
 80007e8:	4091      	lsls	r1, r2
 80007ea:	000a      	movs	r2, r1
 80007ec:	43d2      	mvns	r2, r2
 80007ee:	401a      	ands	r2, r3
 80007f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	019b      	lsls	r3, r3, #6
 80007f6:	22ff      	movs	r2, #255	@ 0xff
 80007f8:	401a      	ands	r2, r3
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	0018      	movs	r0, r3
 8000800:	2303      	movs	r3, #3
 8000802:	4003      	ands	r3, r0
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000808:	4809      	ldr	r0, [pc, #36]	@ (8000830 <__NVIC_SetPriority+0xd8>)
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	001c      	movs	r4, r3
 8000810:	230f      	movs	r3, #15
 8000812:	4023      	ands	r3, r4
 8000814:	3b08      	subs	r3, #8
 8000816:	089b      	lsrs	r3, r3, #2
 8000818:	430a      	orrs	r2, r1
 800081a:	3306      	adds	r3, #6
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	18c3      	adds	r3, r0, r3
 8000820:	3304      	adds	r3, #4
 8000822:	601a      	str	r2, [r3, #0]
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	b003      	add	sp, #12
 800082a:	bd90      	pop	{r4, r7, pc}
 800082c:	e000e100 	.word	0xe000e100
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	1e5a      	subs	r2, r3, #1
 8000840:	2380      	movs	r3, #128	@ 0x80
 8000842:	045b      	lsls	r3, r3, #17
 8000844:	429a      	cmp	r2, r3
 8000846:	d301      	bcc.n	800084c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000848:	2301      	movs	r3, #1
 800084a:	e010      	b.n	800086e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <SysTick_Config+0x44>)
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	3a01      	subs	r2, #1
 8000852:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000854:	2301      	movs	r3, #1
 8000856:	425b      	negs	r3, r3
 8000858:	2103      	movs	r1, #3
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff ff7c 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <SysTick_Config+0x44>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <SysTick_Config+0x44>)
 8000868:	2207      	movs	r2, #7
 800086a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800086c:	2300      	movs	r3, #0
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	e000e010 	.word	0xe000e010

0800087c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	210f      	movs	r1, #15
 8000888:	187b      	adds	r3, r7, r1
 800088a:	1c02      	adds	r2, r0, #0
 800088c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	187b      	adds	r3, r7, r1
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b25b      	sxtb	r3, r3
 8000896:	0011      	movs	r1, r2
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff ff5d 	bl	8000758 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b004      	add	sp, #16
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff ffbf 	bl	8000834 <SysTick_Config>
 80008b6:	0003      	movs	r3, r0
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b002      	add	sp, #8
 80008be:	bd80      	pop	{r7, pc}

080008c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ce:	e14f      	b.n	8000b70 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2101      	movs	r1, #1
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	4091      	lsls	r1, r2
 80008da:	000a      	movs	r2, r1
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d100      	bne.n	80008e8 <HAL_GPIO_Init+0x28>
 80008e6:	e140      	b.n	8000b6a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	2203      	movs	r2, #3
 80008ee:	4013      	ands	r3, r2
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d005      	beq.n	8000900 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	2203      	movs	r2, #3
 80008fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d130      	bne.n	8000962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	409a      	lsls	r2, r3
 800090e:	0013      	movs	r3, r2
 8000910:	43da      	mvns	r2, r3
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	4013      	ands	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	409a      	lsls	r2, r3
 8000922:	0013      	movs	r3, r2
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	4313      	orrs	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000936:	2201      	movs	r2, #1
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	409a      	lsls	r2, r3
 800093c:	0013      	movs	r3, r2
 800093e:	43da      	mvns	r2, r3
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	091b      	lsrs	r3, r3, #4
 800094c:	2201      	movs	r2, #1
 800094e:	401a      	ands	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
 8000954:	0013      	movs	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2203      	movs	r2, #3
 8000968:	4013      	ands	r3, r2
 800096a:	2b03      	cmp	r3, #3
 800096c:	d017      	beq.n	800099e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	2203      	movs	r2, #3
 800097a:	409a      	lsls	r2, r3
 800097c:	0013      	movs	r3, r2
 800097e:	43da      	mvns	r2, r3
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	409a      	lsls	r2, r3
 8000990:	0013      	movs	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2203      	movs	r2, #3
 80009a4:	4013      	ands	r3, r2
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d123      	bne.n	80009f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	08da      	lsrs	r2, r3, #3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3208      	adds	r2, #8
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	58d3      	ldr	r3, [r2, r3]
 80009b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	2207      	movs	r2, #7
 80009bc:	4013      	ands	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	220f      	movs	r2, #15
 80009c2:	409a      	lsls	r2, r3
 80009c4:	0013      	movs	r3, r2
 80009c6:	43da      	mvns	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	691a      	ldr	r2, [r3, #16]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	2107      	movs	r1, #7
 80009d6:	400b      	ands	r3, r1
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	409a      	lsls	r2, r3
 80009dc:	0013      	movs	r3, r2
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	08da      	lsrs	r2, r3, #3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3208      	adds	r2, #8
 80009ec:	0092      	lsls	r2, r2, #2
 80009ee:	6939      	ldr	r1, [r7, #16]
 80009f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	2203      	movs	r2, #3
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	43da      	mvns	r2, r3
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	2203      	movs	r2, #3
 8000a10:	401a      	ands	r2, r3
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685a      	ldr	r2, [r3, #4]
 8000a2a:	23c0      	movs	r3, #192	@ 0xc0
 8000a2c:	029b      	lsls	r3, r3, #10
 8000a2e:	4013      	ands	r3, r2
 8000a30:	d100      	bne.n	8000a34 <HAL_GPIO_Init+0x174>
 8000a32:	e09a      	b.n	8000b6a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a34:	4b54      	ldr	r3, [pc, #336]	@ (8000b88 <HAL_GPIO_Init+0x2c8>)
 8000a36:	699a      	ldr	r2, [r3, #24]
 8000a38:	4b53      	ldr	r3, [pc, #332]	@ (8000b88 <HAL_GPIO_Init+0x2c8>)
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	619a      	str	r2, [r3, #24]
 8000a40:	4b51      	ldr	r3, [pc, #324]	@ (8000b88 <HAL_GPIO_Init+0x2c8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	2201      	movs	r2, #1
 8000a46:	4013      	ands	r3, r2
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8000b8c <HAL_GPIO_Init+0x2cc>)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	3302      	adds	r3, #2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	589b      	ldr	r3, [r3, r2]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	4013      	ands	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	220f      	movs	r2, #15
 8000a64:	409a      	lsls	r2, r3
 8000a66:	0013      	movs	r3, r2
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	2390      	movs	r3, #144	@ 0x90
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d013      	beq.n	8000aa2 <HAL_GPIO_Init+0x1e2>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a44      	ldr	r2, [pc, #272]	@ (8000b90 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d00d      	beq.n	8000a9e <HAL_GPIO_Init+0x1de>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a43      	ldr	r2, [pc, #268]	@ (8000b94 <HAL_GPIO_Init+0x2d4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d007      	beq.n	8000a9a <HAL_GPIO_Init+0x1da>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a42      	ldr	r2, [pc, #264]	@ (8000b98 <HAL_GPIO_Init+0x2d8>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_GPIO_Init+0x1d6>
 8000a92:	2303      	movs	r3, #3
 8000a94:	e006      	b.n	8000aa4 <HAL_GPIO_Init+0x1e4>
 8000a96:	2305      	movs	r3, #5
 8000a98:	e004      	b.n	8000aa4 <HAL_GPIO_Init+0x1e4>
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	e002      	b.n	8000aa4 <HAL_GPIO_Init+0x1e4>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <HAL_GPIO_Init+0x1e4>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	400a      	ands	r2, r1
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	4093      	lsls	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ab4:	4935      	ldr	r1, [pc, #212]	@ (8000b8c <HAL_GPIO_Init+0x2cc>)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	089b      	lsrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac2:	4b36      	ldr	r3, [pc, #216]	@ (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43da      	mvns	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	2380      	movs	r3, #128	@ 0x80
 8000ad8:	035b      	lsls	r3, r3, #13
 8000ada:	4013      	ands	r3, r2
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000aec:	4b2b      	ldr	r3, [pc, #172]	@ (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43da      	mvns	r2, r3
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	039b      	lsls	r3, r3, #14
 8000b04:	4013      	ands	r3, r2
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b10:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	2380      	movs	r3, #128	@ 0x80
 8000b2c:	029b      	lsls	r3, r3, #10
 8000b2e:	4013      	ands	r3, r2
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000b40:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43da      	mvns	r2, r3
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	2380      	movs	r3, #128	@ 0x80
 8000b56:	025b      	lsls	r3, r3, #9
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <HAL_GPIO_Init+0x2dc>)
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	40da      	lsrs	r2, r3
 8000b78:	1e13      	subs	r3, r2, #0
 8000b7a:	d000      	beq.n	8000b7e <HAL_GPIO_Init+0x2be>
 8000b7c:	e6a8      	b.n	80008d0 <HAL_GPIO_Init+0x10>
  } 
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46c0      	nop			@ (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b006      	add	sp, #24
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	48000800 	.word	0x48000800
 8000b98:	48000c00 	.word	0x48000c00
 8000b9c:	40010400 	.word	0x40010400

08000ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	000a      	movs	r2, r1
 8000baa:	1cbb      	adds	r3, r7, #2
 8000bac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	1cba      	adds	r2, r7, #2
 8000bb4:	8812      	ldrh	r2, [r2, #0]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d004      	beq.n	8000bc4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000bba:	230f      	movs	r3, #15
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e003      	b.n	8000bcc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000bcc:	230f      	movs	r3, #15
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	781b      	ldrb	r3, [r3, #0]
  }
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b004      	add	sp, #16
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e301      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	d100      	bne.n	8000bfa <HAL_RCC_OscConfig+0x1e>
 8000bf8:	e08d      	b.n	8000d16 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bfa:	4bc3      	ldr	r3, [pc, #780]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	220c      	movs	r2, #12
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d00e      	beq.n	8000c24 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c06:	4bc0      	ldr	r3, [pc, #768]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d116      	bne.n	8000c40 <HAL_RCC_OscConfig+0x64>
 8000c12:	4bbd      	ldr	r3, [pc, #756]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	2380      	movs	r3, #128	@ 0x80
 8000c18:	025b      	lsls	r3, r3, #9
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	2380      	movs	r3, #128	@ 0x80
 8000c1e:	025b      	lsls	r3, r3, #9
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d10d      	bne.n	8000c40 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c24:	4bb8      	ldr	r3, [pc, #736]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	2380      	movs	r3, #128	@ 0x80
 8000c2a:	029b      	lsls	r3, r3, #10
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	d100      	bne.n	8000c32 <HAL_RCC_OscConfig+0x56>
 8000c30:	e070      	b.n	8000d14 <HAL_RCC_OscConfig+0x138>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d000      	beq.n	8000c3c <HAL_RCC_OscConfig+0x60>
 8000c3a:	e06b      	b.n	8000d14 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e2d8      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d107      	bne.n	8000c58 <HAL_RCC_OscConfig+0x7c>
 8000c48:	4baf      	ldr	r3, [pc, #700]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4bae      	ldr	r3, [pc, #696]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c4e:	2180      	movs	r1, #128	@ 0x80
 8000c50:	0249      	lsls	r1, r1, #9
 8000c52:	430a      	orrs	r2, r1
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	e02f      	b.n	8000cb8 <HAL_RCC_OscConfig+0xdc>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d10c      	bne.n	8000c7a <HAL_RCC_OscConfig+0x9e>
 8000c60:	4ba9      	ldr	r3, [pc, #676]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4ba8      	ldr	r3, [pc, #672]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c66:	49a9      	ldr	r1, [pc, #676]	@ (8000f0c <HAL_RCC_OscConfig+0x330>)
 8000c68:	400a      	ands	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	4ba6      	ldr	r3, [pc, #664]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4ba5      	ldr	r3, [pc, #660]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c72:	49a7      	ldr	r1, [pc, #668]	@ (8000f10 <HAL_RCC_OscConfig+0x334>)
 8000c74:	400a      	ands	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	e01e      	b.n	8000cb8 <HAL_RCC_OscConfig+0xdc>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b05      	cmp	r3, #5
 8000c80:	d10e      	bne.n	8000ca0 <HAL_RCC_OscConfig+0xc4>
 8000c82:	4ba1      	ldr	r3, [pc, #644]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4ba0      	ldr	r3, [pc, #640]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c88:	2180      	movs	r1, #128	@ 0x80
 8000c8a:	02c9      	lsls	r1, r1, #11
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	4b9d      	ldr	r3, [pc, #628]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b9c      	ldr	r3, [pc, #624]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000c96:	2180      	movs	r1, #128	@ 0x80
 8000c98:	0249      	lsls	r1, r1, #9
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e00b      	b.n	8000cb8 <HAL_RCC_OscConfig+0xdc>
 8000ca0:	4b99      	ldr	r3, [pc, #612]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b98      	ldr	r3, [pc, #608]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000ca6:	4999      	ldr	r1, [pc, #612]	@ (8000f0c <HAL_RCC_OscConfig+0x330>)
 8000ca8:	400a      	ands	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	4b96      	ldr	r3, [pc, #600]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b95      	ldr	r3, [pc, #596]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000cb2:	4997      	ldr	r1, [pc, #604]	@ (8000f10 <HAL_RCC_OscConfig+0x334>)
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d014      	beq.n	8000cea <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fd1c 	bl	80006fc <HAL_GetTick>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc8:	e008      	b.n	8000cdc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cca:	f7ff fd17 	bl	80006fc <HAL_GetTick>
 8000cce:	0002      	movs	r2, r0
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	2b64      	cmp	r3, #100	@ 0x64
 8000cd6:	d901      	bls.n	8000cdc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e28a      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cdc:	4b8a      	ldr	r3, [pc, #552]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	029b      	lsls	r3, r3, #10
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d0f0      	beq.n	8000cca <HAL_RCC_OscConfig+0xee>
 8000ce8:	e015      	b.n	8000d16 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cea:	f7ff fd07 	bl	80006fc <HAL_GetTick>
 8000cee:	0003      	movs	r3, r0
 8000cf0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf2:	e008      	b.n	8000d06 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cf4:	f7ff fd02 	bl	80006fc <HAL_GetTick>
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b64      	cmp	r3, #100	@ 0x64
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e275      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d06:	4b80      	ldr	r3, [pc, #512]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	2380      	movs	r3, #128	@ 0x80
 8000d0c:	029b      	lsls	r3, r3, #10
 8000d0e:	4013      	ands	r3, r2
 8000d10:	d1f0      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x118>
 8000d12:	e000      	b.n	8000d16 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d14:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d100      	bne.n	8000d22 <HAL_RCC_OscConfig+0x146>
 8000d20:	e069      	b.n	8000df6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d22:	4b79      	ldr	r3, [pc, #484]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	220c      	movs	r2, #12
 8000d28:	4013      	ands	r3, r2
 8000d2a:	d00b      	beq.n	8000d44 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d2c:	4b76      	ldr	r3, [pc, #472]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	220c      	movs	r2, #12
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d11c      	bne.n	8000d72 <HAL_RCC_OscConfig+0x196>
 8000d38:	4b73      	ldr	r3, [pc, #460]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	2380      	movs	r3, #128	@ 0x80
 8000d3e:	025b      	lsls	r3, r3, #9
 8000d40:	4013      	ands	r3, r2
 8000d42:	d116      	bne.n	8000d72 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d44:	4b70      	ldr	r3, [pc, #448]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d005      	beq.n	8000d5a <HAL_RCC_OscConfig+0x17e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d001      	beq.n	8000d5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e24b      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5a:	4b6b      	ldr	r3, [pc, #428]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	22f8      	movs	r2, #248	@ 0xf8
 8000d60:	4393      	bics	r3, r2
 8000d62:	0019      	movs	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	00da      	lsls	r2, r3, #3
 8000d6a:	4b67      	ldr	r3, [pc, #412]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d70:	e041      	b.n	8000df6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d024      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d7a:	4b63      	ldr	r3, [pc, #396]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b62      	ldr	r3, [pc, #392]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	430a      	orrs	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d86:	f7ff fcb9 	bl	80006fc <HAL_GetTick>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d90:	f7ff fcb4 	bl	80006fc <HAL_GetTick>
 8000d94:	0002      	movs	r2, r0
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e227      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da2:	4b59      	ldr	r3, [pc, #356]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2202      	movs	r2, #2
 8000da8:	4013      	ands	r3, r2
 8000daa:	d0f1      	beq.n	8000d90 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dac:	4b56      	ldr	r3, [pc, #344]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	22f8      	movs	r2, #248	@ 0xf8
 8000db2:	4393      	bics	r3, r2
 8000db4:	0019      	movs	r1, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	00da      	lsls	r2, r3, #3
 8000dbc:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e018      	b.n	8000df6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc4:	4b50      	ldr	r3, [pc, #320]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000dca:	2101      	movs	r1, #1
 8000dcc:	438a      	bics	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fc94 	bl	80006fc <HAL_GetTick>
 8000dd4:	0003      	movs	r3, r0
 8000dd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dda:	f7ff fc8f 	bl	80006fc <HAL_GetTick>
 8000dde:	0002      	movs	r2, r0
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e202      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dec:	4b46      	ldr	r3, [pc, #280]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2202      	movs	r2, #2
 8000df2:	4013      	ands	r3, r2
 8000df4:	d1f1      	bne.n	8000dda <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d036      	beq.n	8000e6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d019      	beq.n	8000e3c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e08:	4b3f      	ldr	r3, [pc, #252]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	2101      	movs	r1, #1
 8000e10:	430a      	orrs	r2, r1
 8000e12:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e14:	f7ff fc72 	bl	80006fc <HAL_GetTick>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e1e:	f7ff fc6d 	bl	80006fc <HAL_GetTick>
 8000e22:	0002      	movs	r2, r0
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e1e0      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e30:	4b35      	ldr	r3, [pc, #212]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e34:	2202      	movs	r2, #2
 8000e36:	4013      	ands	r3, r2
 8000e38:	d0f1      	beq.n	8000e1e <HAL_RCC_OscConfig+0x242>
 8000e3a:	e018      	b.n	8000e6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e3c:	4b32      	ldr	r3, [pc, #200]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000e3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e40:	4b31      	ldr	r3, [pc, #196]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000e42:	2101      	movs	r1, #1
 8000e44:	438a      	bics	r2, r1
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e48:	f7ff fc58 	bl	80006fc <HAL_GetTick>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e52:	f7ff fc53 	bl	80006fc <HAL_GetTick>
 8000e56:	0002      	movs	r2, r0
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e1c6      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e64:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e68:	2202      	movs	r2, #2
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d1f1      	bne.n	8000e52 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2204      	movs	r2, #4
 8000e74:	4013      	ands	r3, r2
 8000e76:	d100      	bne.n	8000e7a <HAL_RCC_OscConfig+0x29e>
 8000e78:	e0b4      	b.n	8000fe4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e7a:	201f      	movs	r0, #31
 8000e7c:	183b      	adds	r3, r7, r0
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e82:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000e84:	69da      	ldr	r2, [r3, #28]
 8000e86:	2380      	movs	r3, #128	@ 0x80
 8000e88:	055b      	lsls	r3, r3, #21
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d110      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000e90:	69da      	ldr	r2, [r3, #28]
 8000e92:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	0549      	lsls	r1, r1, #21
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	61da      	str	r2, [r3, #28]
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	69da      	ldr	r2, [r3, #28]
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	055b      	lsls	r3, r3, #21
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000eaa:	183b      	adds	r3, r7, r0
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb0:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <HAL_RCC_OscConfig+0x338>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d11a      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_RCC_OscConfig+0x338>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <HAL_RCC_OscConfig+0x338>)
 8000ec2:	2180      	movs	r1, #128	@ 0x80
 8000ec4:	0049      	lsls	r1, r1, #1
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eca:	f7ff fc17 	bl	80006fc <HAL_GetTick>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed4:	f7ff fc12 	bl	80006fc <HAL_GetTick>
 8000ed8:	0002      	movs	r2, r0
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b64      	cmp	r3, #100	@ 0x64
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e185      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <HAL_RCC_OscConfig+0x338>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	2380      	movs	r3, #128	@ 0x80
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d0f0      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d10e      	bne.n	8000f18 <HAL_RCC_OscConfig+0x33c>
 8000efa:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000efc:	6a1a      	ldr	r2, [r3, #32]
 8000efe:	4b02      	ldr	r3, [pc, #8]	@ (8000f08 <HAL_RCC_OscConfig+0x32c>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	430a      	orrs	r2, r1
 8000f04:	621a      	str	r2, [r3, #32]
 8000f06:	e035      	b.n	8000f74 <HAL_RCC_OscConfig+0x398>
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	fffeffff 	.word	0xfffeffff
 8000f10:	fffbffff 	.word	0xfffbffff
 8000f14:	40007000 	.word	0x40007000
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10c      	bne.n	8000f3a <HAL_RCC_OscConfig+0x35e>
 8000f20:	4bb6      	ldr	r3, [pc, #728]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	4bb5      	ldr	r3, [pc, #724]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	438a      	bics	r2, r1
 8000f2a:	621a      	str	r2, [r3, #32]
 8000f2c:	4bb3      	ldr	r3, [pc, #716]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f2e:	6a1a      	ldr	r2, [r3, #32]
 8000f30:	4bb2      	ldr	r3, [pc, #712]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f32:	2104      	movs	r1, #4
 8000f34:	438a      	bics	r2, r1
 8000f36:	621a      	str	r2, [r3, #32]
 8000f38:	e01c      	b.n	8000f74 <HAL_RCC_OscConfig+0x398>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b05      	cmp	r3, #5
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x380>
 8000f42:	4bae      	ldr	r3, [pc, #696]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f44:	6a1a      	ldr	r2, [r3, #32]
 8000f46:	4bad      	ldr	r3, [pc, #692]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f48:	2104      	movs	r1, #4
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	621a      	str	r2, [r3, #32]
 8000f4e:	4bab      	ldr	r3, [pc, #684]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f50:	6a1a      	ldr	r2, [r3, #32]
 8000f52:	4baa      	ldr	r3, [pc, #680]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f54:	2101      	movs	r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	621a      	str	r2, [r3, #32]
 8000f5a:	e00b      	b.n	8000f74 <HAL_RCC_OscConfig+0x398>
 8000f5c:	4ba7      	ldr	r3, [pc, #668]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f5e:	6a1a      	ldr	r2, [r3, #32]
 8000f60:	4ba6      	ldr	r3, [pc, #664]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f62:	2101      	movs	r1, #1
 8000f64:	438a      	bics	r2, r1
 8000f66:	621a      	str	r2, [r3, #32]
 8000f68:	4ba4      	ldr	r3, [pc, #656]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f6a:	6a1a      	ldr	r2, [r3, #32]
 8000f6c:	4ba3      	ldr	r3, [pc, #652]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f6e:	2104      	movs	r1, #4
 8000f70:	438a      	bics	r2, r1
 8000f72:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d014      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fbbe 	bl	80006fc <HAL_GetTick>
 8000f80:	0003      	movs	r3, r0
 8000f82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f84:	e009      	b.n	8000f9a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f86:	f7ff fbb9 	bl	80006fc <HAL_GetTick>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	4a9b      	ldr	r2, [pc, #620]	@ (8001200 <HAL_RCC_OscConfig+0x624>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e12b      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f9a:	4b98      	ldr	r3, [pc, #608]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x3aa>
 8000fa4:	e013      	b.n	8000fce <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fba9 	bl	80006fc <HAL_GetTick>
 8000faa:	0003      	movs	r3, r0
 8000fac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fae:	e009      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fba4 	bl	80006fc <HAL_GetTick>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4a91      	ldr	r2, [pc, #580]	@ (8001200 <HAL_RCC_OscConfig+0x624>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e116      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc4:	4b8d      	ldr	r3, [pc, #564]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fce:	231f      	movs	r3, #31
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d105      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd8:	4b88      	ldr	r3, [pc, #544]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000fda:	69da      	ldr	r2, [r3, #28]
 8000fdc:	4b87      	ldr	r3, [pc, #540]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000fde:	4989      	ldr	r1, [pc, #548]	@ (8001204 <HAL_RCC_OscConfig+0x628>)
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2210      	movs	r2, #16
 8000fea:	4013      	ands	r3, r2
 8000fec:	d063      	beq.n	80010b6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d12a      	bne.n	800104c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ff6:	4b81      	ldr	r3, [pc, #516]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ffa:	4b80      	ldr	r3, [pc, #512]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8000ffc:	2104      	movs	r1, #4
 8000ffe:	430a      	orrs	r2, r1
 8001000:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001002:	4b7e      	ldr	r3, [pc, #504]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001004:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001006:	4b7d      	ldr	r3, [pc, #500]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001008:	2101      	movs	r1, #1
 800100a:	430a      	orrs	r2, r1
 800100c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100e:	f7ff fb75 	bl	80006fc <HAL_GetTick>
 8001012:	0003      	movs	r3, r0
 8001014:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001018:	f7ff fb70 	bl	80006fc <HAL_GetTick>
 800101c:	0002      	movs	r2, r0
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e0e3      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800102a:	4b74      	ldr	r3, [pc, #464]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 800102c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800102e:	2202      	movs	r2, #2
 8001030:	4013      	ands	r3, r2
 8001032:	d0f1      	beq.n	8001018 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001034:	4b71      	ldr	r3, [pc, #452]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001038:	22f8      	movs	r2, #248	@ 0xf8
 800103a:	4393      	bics	r3, r2
 800103c:	0019      	movs	r1, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	00da      	lsls	r2, r3, #3
 8001044:	4b6d      	ldr	r3, [pc, #436]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001046:	430a      	orrs	r2, r1
 8001048:	635a      	str	r2, [r3, #52]	@ 0x34
 800104a:	e034      	b.n	80010b6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	3305      	adds	r3, #5
 8001052:	d111      	bne.n	8001078 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001054:	4b69      	ldr	r3, [pc, #420]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001058:	4b68      	ldr	r3, [pc, #416]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 800105a:	2104      	movs	r1, #4
 800105c:	438a      	bics	r2, r1
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001060:	4b66      	ldr	r3, [pc, #408]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001064:	22f8      	movs	r2, #248	@ 0xf8
 8001066:	4393      	bics	r3, r2
 8001068:	0019      	movs	r1, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	00da      	lsls	r2, r3, #3
 8001070:	4b62      	ldr	r3, [pc, #392]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001072:	430a      	orrs	r2, r1
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
 8001076:	e01e      	b.n	80010b6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001078:	4b60      	ldr	r3, [pc, #384]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 800107a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800107c:	4b5f      	ldr	r3, [pc, #380]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 800107e:	2104      	movs	r1, #4
 8001080:	430a      	orrs	r2, r1
 8001082:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001084:	4b5d      	ldr	r3, [pc, #372]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001088:	4b5c      	ldr	r3, [pc, #368]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 800108a:	2101      	movs	r1, #1
 800108c:	438a      	bics	r2, r1
 800108e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001090:	f7ff fb34 	bl	80006fc <HAL_GetTick>
 8001094:	0003      	movs	r3, r0
 8001096:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800109a:	f7ff fb2f 	bl	80006fc <HAL_GetTick>
 800109e:	0002      	movs	r2, r0
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e0a2      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010ac:	4b53      	ldr	r3, [pc, #332]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 80010ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b0:	2202      	movs	r2, #2
 80010b2:	4013      	ands	r3, r2
 80010b4:	d1f1      	bne.n	800109a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d100      	bne.n	80010c0 <HAL_RCC_OscConfig+0x4e4>
 80010be:	e097      	b.n	80011f0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c0:	4b4e      	ldr	r3, [pc, #312]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	220c      	movs	r2, #12
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d100      	bne.n	80010ce <HAL_RCC_OscConfig+0x4f2>
 80010cc:	e06b      	b.n	80011a6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d14c      	bne.n	8001170 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d6:	4b49      	ldr	r3, [pc, #292]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4b48      	ldr	r3, [pc, #288]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 80010dc:	494a      	ldr	r1, [pc, #296]	@ (8001208 <HAL_RCC_OscConfig+0x62c>)
 80010de:	400a      	ands	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fb0b 	bl	80006fc <HAL_GetTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ec:	f7ff fb06 	bl	80006fc <HAL_GetTick>
 80010f0:	0002      	movs	r2, r0
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e079      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fe:	4b3f      	ldr	r3, [pc, #252]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	2380      	movs	r3, #128	@ 0x80
 8001104:	049b      	lsls	r3, r3, #18
 8001106:	4013      	ands	r3, r2
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800110a:	4b3c      	ldr	r3, [pc, #240]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 800110c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800110e:	220f      	movs	r2, #15
 8001110:	4393      	bics	r3, r2
 8001112:	0019      	movs	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001118:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 800111a:	430a      	orrs	r2, r1
 800111c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800111e:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	4a3a      	ldr	r2, [pc, #232]	@ (800120c <HAL_RCC_OscConfig+0x630>)
 8001124:	4013      	ands	r3, r2
 8001126:	0019      	movs	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001130:	431a      	orrs	r2, r3
 8001132:	4b32      	ldr	r3, [pc, #200]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001134:	430a      	orrs	r2, r1
 8001136:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001138:	4b30      	ldr	r3, [pc, #192]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b2f      	ldr	r3, [pc, #188]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 800113e:	2180      	movs	r1, #128	@ 0x80
 8001140:	0449      	lsls	r1, r1, #17
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fad9 	bl	80006fc <HAL_GetTick>
 800114a:	0003      	movs	r3, r0
 800114c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001150:	f7ff fad4 	bl	80006fc <HAL_GetTick>
 8001154:	0002      	movs	r2, r0
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e047      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001162:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2380      	movs	r3, #128	@ 0x80
 8001168:	049b      	lsls	r3, r3, #18
 800116a:	4013      	ands	r3, r2
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0x574>
 800116e:	e03f      	b.n	80011f0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 8001176:	4924      	ldr	r1, [pc, #144]	@ (8001208 <HAL_RCC_OscConfig+0x62c>)
 8001178:	400a      	ands	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fabe 	bl	80006fc <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff fab9 	bl	80006fc <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e02c      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	049b      	lsls	r3, r3, #18
 80011a0:	4013      	ands	r3, r2
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x5aa>
 80011a4:	e024      	b.n	80011f0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e01f      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80011b8:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <HAL_RCC_OscConfig+0x620>)
 80011ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	2380      	movs	r3, #128	@ 0x80
 80011c2:	025b      	lsls	r3, r3, #9
 80011c4:	401a      	ands	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d10e      	bne.n	80011ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	220f      	movs	r2, #15
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d8:	429a      	cmp	r2, r3
 80011da:	d107      	bne.n	80011ec <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	23f0      	movs	r3, #240	@ 0xf0
 80011e0:	039b      	lsls	r3, r3, #14
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	0018      	movs	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b008      	add	sp, #32
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	40021000 	.word	0x40021000
 8001200:	00001388 	.word	0x00001388
 8001204:	efffffff 	.word	0xefffffff
 8001208:	feffffff 	.word	0xfeffffff
 800120c:	ffc2ffff 	.word	0xffc2ffff

08001210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0b3      	b.n	800138c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001224:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <HAL_RCC_ClockConfig+0x184>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2201      	movs	r2, #1
 800122a:	4013      	ands	r3, r2
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d911      	bls.n	8001256 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <HAL_RCC_ClockConfig+0x184>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2201      	movs	r2, #1
 8001238:	4393      	bics	r3, r2
 800123a:	0019      	movs	r1, r3
 800123c:	4b55      	ldr	r3, [pc, #340]	@ (8001394 <HAL_RCC_ClockConfig+0x184>)
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001244:	4b53      	ldr	r3, [pc, #332]	@ (8001394 <HAL_RCC_ClockConfig+0x184>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2201      	movs	r2, #1
 800124a:	4013      	ands	r3, r2
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d001      	beq.n	8001256 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e09a      	b.n	800138c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d015      	beq.n	800128c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2204      	movs	r2, #4
 8001266:	4013      	ands	r3, r2
 8001268:	d006      	beq.n	8001278 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800126a:	4b4b      	ldr	r3, [pc, #300]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4b4a      	ldr	r3, [pc, #296]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 8001270:	21e0      	movs	r1, #224	@ 0xe0
 8001272:	00c9      	lsls	r1, r1, #3
 8001274:	430a      	orrs	r2, r1
 8001276:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001278:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	22f0      	movs	r2, #240	@ 0xf0
 800127e:	4393      	bics	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	4b44      	ldr	r3, [pc, #272]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 8001288:	430a      	orrs	r2, r1
 800128a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	d040      	beq.n	8001318 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d107      	bne.n	80012ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	4b3e      	ldr	r3, [pc, #248]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	2380      	movs	r3, #128	@ 0x80
 80012a4:	029b      	lsls	r3, r3, #10
 80012a6:	4013      	ands	r3, r2
 80012a8:	d114      	bne.n	80012d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e06e      	b.n	800138c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d107      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	2380      	movs	r3, #128	@ 0x80
 80012bc:	049b      	lsls	r3, r3, #18
 80012be:	4013      	ands	r3, r2
 80012c0:	d108      	bne.n	80012d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e062      	b.n	800138c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c6:	4b34      	ldr	r3, [pc, #208]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2202      	movs	r2, #2
 80012cc:	4013      	ands	r3, r2
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e05b      	b.n	800138c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d4:	4b30      	ldr	r3, [pc, #192]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2203      	movs	r2, #3
 80012da:	4393      	bics	r3, r2
 80012dc:	0019      	movs	r1, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e8:	f7ff fa08 	bl	80006fc <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f0:	e009      	b.n	8001306 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f2:	f7ff fa03 	bl	80006fc <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	4a27      	ldr	r2, [pc, #156]	@ (800139c <HAL_RCC_ClockConfig+0x18c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e042      	b.n	800138c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	220c      	movs	r2, #12
 800130c:	401a      	ands	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	429a      	cmp	r2, r3
 8001316:	d1ec      	bne.n	80012f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001318:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <HAL_RCC_ClockConfig+0x184>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	4013      	ands	r3, r2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d211      	bcs.n	800134a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <HAL_RCC_ClockConfig+0x184>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2201      	movs	r2, #1
 800132c:	4393      	bics	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <HAL_RCC_ClockConfig+0x184>)
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001338:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <HAL_RCC_ClockConfig+0x184>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2201      	movs	r2, #1
 800133e:	4013      	ands	r3, r2
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d001      	beq.n	800134a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e020      	b.n	800138c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2204      	movs	r2, #4
 8001350:	4013      	ands	r3, r2
 8001352:	d009      	beq.n	8001368 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001354:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <HAL_RCC_ClockConfig+0x190>)
 800135a:	4013      	ands	r3, r2
 800135c:	0019      	movs	r1, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001368:	f000 f820 	bl	80013ac <HAL_RCC_GetSysClockFreq>
 800136c:	0001      	movs	r1, r0
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_RCC_ClockConfig+0x188>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	220f      	movs	r2, #15
 8001376:	4013      	ands	r3, r2
 8001378:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <HAL_RCC_ClockConfig+0x194>)
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	000a      	movs	r2, r1
 800137e:	40da      	lsrs	r2, r3
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_RCC_ClockConfig+0x198>)
 8001382:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001384:	2003      	movs	r0, #3
 8001386:	f7ff f973 	bl	8000670 <HAL_InitTick>
  
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b004      	add	sp, #16
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40022000 	.word	0x40022000
 8001398:	40021000 	.word	0x40021000
 800139c:	00001388 	.word	0x00001388
 80013a0:	fffff8ff 	.word	0xfffff8ff
 80013a4:	08002170 	.word	0x08002170
 80013a8:	20000000 	.word	0x20000000

080013ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80013c6:	4b20      	ldr	r3, [pc, #128]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	220c      	movs	r2, #12
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d002      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x30>
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d003      	beq.n	80013e2 <HAL_RCC_GetSysClockFreq+0x36>
 80013da:	e02c      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013de:	613b      	str	r3, [r7, #16]
      break;
 80013e0:	e02c      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	220f      	movs	r2, #15
 80013e8:	4013      	ands	r3, r2
 80013ea:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013f0:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f4:	220f      	movs	r2, #15
 80013f6:	4013      	ands	r3, r2
 80013f8:	4a16      	ldr	r2, [pc, #88]	@ (8001454 <HAL_RCC_GetSysClockFreq+0xa8>)
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	025b      	lsls	r3, r3, #9
 8001404:	4013      	ands	r3, r2
 8001406:	d009      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	4810      	ldr	r0, [pc, #64]	@ (800144c <HAL_RCC_GetSysClockFreq+0xa0>)
 800140c:	f7fe fe7c 	bl	8000108 <__udivsi3>
 8001410:	0003      	movs	r3, r0
 8001412:	001a      	movs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4353      	muls	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e009      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	000a      	movs	r2, r1
 8001420:	0152      	lsls	r2, r2, #5
 8001422:	1a52      	subs	r2, r2, r1
 8001424:	0193      	lsls	r3, r2, #6
 8001426:	1a9b      	subs	r3, r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	185b      	adds	r3, r3, r1
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
      break;
 8001434:	e002      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_RCC_GetSysClockFreq+0xac>)
 8001438:	613b      	str	r3, [r7, #16]
      break;
 800143a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800143c:	693b      	ldr	r3, [r7, #16]
}
 800143e:	0018      	movs	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	b006      	add	sp, #24
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	40021000 	.word	0x40021000
 800144c:	01e84800 	.word	0x01e84800
 8001450:	08002180 	.word	0x08002180
 8001454:	08002190 	.word	0x08002190
 8001458:	007a1200 	.word	0x007a1200

0800145c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e042      	b.n	80014f4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	223d      	movs	r2, #61	@ 0x3d
 8001472:	5c9b      	ldrb	r3, [r3, r2]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d107      	bne.n	800148a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	223c      	movs	r2, #60	@ 0x3c
 800147e:	2100      	movs	r1, #0
 8001480:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff f83b 	bl	8000500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	223d      	movs	r2, #61	@ 0x3d
 800148e:	2102      	movs	r1, #2
 8001490:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3304      	adds	r3, #4
 800149a:	0019      	movs	r1, r3
 800149c:	0010      	movs	r0, r2
 800149e:	f000 fac5 	bl	8001a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2246      	movs	r2, #70	@ 0x46
 80014a6:	2101      	movs	r1, #1
 80014a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	223e      	movs	r2, #62	@ 0x3e
 80014ae:	2101      	movs	r1, #1
 80014b0:	5499      	strb	r1, [r3, r2]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	223f      	movs	r2, #63	@ 0x3f
 80014b6:	2101      	movs	r1, #1
 80014b8:	5499      	strb	r1, [r3, r2]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2240      	movs	r2, #64	@ 0x40
 80014be:	2101      	movs	r1, #1
 80014c0:	5499      	strb	r1, [r3, r2]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2241      	movs	r2, #65	@ 0x41
 80014c6:	2101      	movs	r1, #1
 80014c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2242      	movs	r2, #66	@ 0x42
 80014ce:	2101      	movs	r1, #1
 80014d0:	5499      	strb	r1, [r3, r2]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2243      	movs	r2, #67	@ 0x43
 80014d6:	2101      	movs	r1, #1
 80014d8:	5499      	strb	r1, [r3, r2]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2244      	movs	r2, #68	@ 0x44
 80014de:	2101      	movs	r1, #1
 80014e0:	5499      	strb	r1, [r3, r2]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2245      	movs	r2, #69	@ 0x45
 80014e6:	2101      	movs	r1, #1
 80014e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	223d      	movs	r2, #61	@ 0x3d
 80014ee:	2101      	movs	r1, #1
 80014f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	0018      	movs	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e042      	b.n	8001594 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	223d      	movs	r2, #61	@ 0x3d
 8001512:	5c9b      	ldrb	r3, [r3, r2]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d107      	bne.n	800152a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	223c      	movs	r2, #60	@ 0x3c
 800151e:	2100      	movs	r1, #0
 8001520:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	0018      	movs	r0, r3
 8001526:	f000 f839 	bl	800159c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	223d      	movs	r2, #61	@ 0x3d
 800152e:	2102      	movs	r1, #2
 8001530:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3304      	adds	r3, #4
 800153a:	0019      	movs	r1, r3
 800153c:	0010      	movs	r0, r2
 800153e:	f000 fa75 	bl	8001a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2246      	movs	r2, #70	@ 0x46
 8001546:	2101      	movs	r1, #1
 8001548:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	223e      	movs	r2, #62	@ 0x3e
 800154e:	2101      	movs	r1, #1
 8001550:	5499      	strb	r1, [r3, r2]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	223f      	movs	r2, #63	@ 0x3f
 8001556:	2101      	movs	r1, #1
 8001558:	5499      	strb	r1, [r3, r2]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2240      	movs	r2, #64	@ 0x40
 800155e:	2101      	movs	r1, #1
 8001560:	5499      	strb	r1, [r3, r2]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2241      	movs	r2, #65	@ 0x41
 8001566:	2101      	movs	r1, #1
 8001568:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2242      	movs	r2, #66	@ 0x42
 800156e:	2101      	movs	r1, #1
 8001570:	5499      	strb	r1, [r3, r2]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2243      	movs	r2, #67	@ 0x43
 8001576:	2101      	movs	r1, #1
 8001578:	5499      	strb	r1, [r3, r2]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2244      	movs	r2, #68	@ 0x44
 800157e:	2101      	movs	r1, #1
 8001580:	5499      	strb	r1, [r3, r2]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2245      	movs	r2, #69	@ 0x45
 8001586:	2101      	movs	r1, #1
 8001588:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	223d      	movs	r2, #61	@ 0x3d
 800158e:	2101      	movs	r1, #1
 8001590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80015a4:	46c0      	nop			@ (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d108      	bne.n	80015ce <HAL_TIM_PWM_Start+0x22>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	223e      	movs	r2, #62	@ 0x3e
 80015c0:	5c9b      	ldrb	r3, [r3, r2]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	1e5a      	subs	r2, r3, #1
 80015c8:	4193      	sbcs	r3, r2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	e01f      	b.n	800160e <HAL_TIM_PWM_Start+0x62>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b04      	cmp	r3, #4
 80015d2:	d108      	bne.n	80015e6 <HAL_TIM_PWM_Start+0x3a>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	223f      	movs	r2, #63	@ 0x3f
 80015d8:	5c9b      	ldrb	r3, [r3, r2]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	3b01      	subs	r3, #1
 80015de:	1e5a      	subs	r2, r3, #1
 80015e0:	4193      	sbcs	r3, r2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	e013      	b.n	800160e <HAL_TIM_PWM_Start+0x62>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d108      	bne.n	80015fe <HAL_TIM_PWM_Start+0x52>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2240      	movs	r2, #64	@ 0x40
 80015f0:	5c9b      	ldrb	r3, [r3, r2]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	3b01      	subs	r3, #1
 80015f6:	1e5a      	subs	r2, r3, #1
 80015f8:	4193      	sbcs	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	e007      	b.n	800160e <HAL_TIM_PWM_Start+0x62>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2241      	movs	r2, #65	@ 0x41
 8001602:	5c9b      	ldrb	r3, [r3, r2]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	1e5a      	subs	r2, r3, #1
 800160a:	4193      	sbcs	r3, r2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e064      	b.n	80016e0 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d104      	bne.n	8001626 <HAL_TIM_PWM_Start+0x7a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	223e      	movs	r2, #62	@ 0x3e
 8001620:	2102      	movs	r1, #2
 8001622:	5499      	strb	r1, [r3, r2]
 8001624:	e013      	b.n	800164e <HAL_TIM_PWM_Start+0xa2>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b04      	cmp	r3, #4
 800162a:	d104      	bne.n	8001636 <HAL_TIM_PWM_Start+0x8a>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	223f      	movs	r2, #63	@ 0x3f
 8001630:	2102      	movs	r1, #2
 8001632:	5499      	strb	r1, [r3, r2]
 8001634:	e00b      	b.n	800164e <HAL_TIM_PWM_Start+0xa2>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b08      	cmp	r3, #8
 800163a:	d104      	bne.n	8001646 <HAL_TIM_PWM_Start+0x9a>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2240      	movs	r2, #64	@ 0x40
 8001640:	2102      	movs	r1, #2
 8001642:	5499      	strb	r1, [r3, r2]
 8001644:	e003      	b.n	800164e <HAL_TIM_PWM_Start+0xa2>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2241      	movs	r2, #65	@ 0x41
 800164a:	2102      	movs	r1, #2
 800164c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6839      	ldr	r1, [r7, #0]
 8001654:	2201      	movs	r2, #1
 8001656:	0018      	movs	r0, r3
 8001658:	f000 fcdc 	bl	8002014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a21      	ldr	r2, [pc, #132]	@ (80016e8 <HAL_TIM_PWM_Start+0x13c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d009      	beq.n	800167a <HAL_TIM_PWM_Start+0xce>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a20      	ldr	r2, [pc, #128]	@ (80016ec <HAL_TIM_PWM_Start+0x140>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d004      	beq.n	800167a <HAL_TIM_PWM_Start+0xce>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1e      	ldr	r2, [pc, #120]	@ (80016f0 <HAL_TIM_PWM_Start+0x144>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_TIM_PWM_Start+0xd2>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_TIM_PWM_Start+0xd4>
 800167e:	2300      	movs	r3, #0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2180      	movs	r1, #128	@ 0x80
 8001690:	0209      	lsls	r1, r1, #8
 8001692:	430a      	orrs	r2, r1
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a13      	ldr	r2, [pc, #76]	@ (80016e8 <HAL_TIM_PWM_Start+0x13c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d004      	beq.n	80016aa <HAL_TIM_PWM_Start+0xfe>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a13      	ldr	r2, [pc, #76]	@ (80016f4 <HAL_TIM_PWM_Start+0x148>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d111      	bne.n	80016ce <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2207      	movs	r2, #7
 80016b2:	4013      	ands	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b06      	cmp	r3, #6
 80016ba:	d010      	beq.n	80016de <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2101      	movs	r1, #1
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016cc:	e007      	b.n	80016de <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b004      	add	sp, #16
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	40014400 	.word	0x40014400
 80016f0:	40014800 	.word	0x40014800
 80016f4:	40000400 	.word	0x40000400

080016f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001704:	2317      	movs	r3, #23
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	223c      	movs	r2, #60	@ 0x3c
 8001710:	5c9b      	ldrb	r3, [r3, r2]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001716:	2302      	movs	r3, #2
 8001718:	e0ad      	b.n	8001876 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	223c      	movs	r2, #60	@ 0x3c
 800171e:	2101      	movs	r1, #1
 8001720:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d100      	bne.n	800172a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001728:	e076      	b.n	8001818 <HAL_TIM_PWM_ConfigChannel+0x120>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0c      	cmp	r3, #12
 800172e:	d900      	bls.n	8001732 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001730:	e095      	b.n	800185e <HAL_TIM_PWM_ConfigChannel+0x166>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d04e      	beq.n	80017d6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b08      	cmp	r3, #8
 800173c:	d900      	bls.n	8001740 <HAL_TIM_PWM_ConfigChannel+0x48>
 800173e:	e08e      	b.n	800185e <HAL_TIM_PWM_ConfigChannel+0x166>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_TIM_PWM_ConfigChannel+0x56>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b04      	cmp	r3, #4
 800174a:	d021      	beq.n	8001790 <HAL_TIM_PWM_ConfigChannel+0x98>
 800174c:	e087      	b.n	800185e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	0011      	movs	r1, r2
 8001756:	0018      	movs	r0, r3
 8001758:	f000 f9e2 	bl	8001b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2108      	movs	r1, #8
 8001768:	430a      	orrs	r2, r1
 800176a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2104      	movs	r1, #4
 8001778:	438a      	bics	r2, r1
 800177a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6999      	ldr	r1, [r3, #24]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	619a      	str	r2, [r3, #24]
      break;
 800178e:	e06b      	b.n	8001868 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	0011      	movs	r1, r2
 8001798:	0018      	movs	r0, r3
 800179a:	f000 fa3f 	bl	8001c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699a      	ldr	r2, [r3, #24]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2180      	movs	r1, #128	@ 0x80
 80017aa:	0109      	lsls	r1, r1, #4
 80017ac:	430a      	orrs	r2, r1
 80017ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4931      	ldr	r1, [pc, #196]	@ (8001880 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80017bc:	400a      	ands	r2, r1
 80017be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6999      	ldr	r1, [r3, #24]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	021a      	lsls	r2, r3, #8
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	619a      	str	r2, [r3, #24]
      break;
 80017d4:	e048      	b.n	8001868 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	0011      	movs	r1, r2
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 fa9a 	bl	8001d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	69da      	ldr	r2, [r3, #28]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2108      	movs	r1, #8
 80017f0:	430a      	orrs	r2, r1
 80017f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69da      	ldr	r2, [r3, #28]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2104      	movs	r1, #4
 8001800:	438a      	bics	r2, r1
 8001802:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69d9      	ldr	r1, [r3, #28]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	61da      	str	r2, [r3, #28]
      break;
 8001816:	e027      	b.n	8001868 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	0011      	movs	r1, r2
 8001820:	0018      	movs	r0, r3
 8001822:	f000 faf9 	bl	8001e18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	69da      	ldr	r2, [r3, #28]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2180      	movs	r1, #128	@ 0x80
 8001832:	0109      	lsls	r1, r1, #4
 8001834:	430a      	orrs	r2, r1
 8001836:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	69da      	ldr	r2, [r3, #28]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	490f      	ldr	r1, [pc, #60]	@ (8001880 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001844:	400a      	ands	r2, r1
 8001846:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69d9      	ldr	r1, [r3, #28]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	021a      	lsls	r2, r3, #8
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	61da      	str	r2, [r3, #28]
      break;
 800185c:	e004      	b.n	8001868 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800185e:	2317      	movs	r3, #23
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
      break;
 8001866:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	223c      	movs	r2, #60	@ 0x3c
 800186c:	2100      	movs	r1, #0
 800186e:	5499      	strb	r1, [r3, r2]

  return status;
 8001870:	2317      	movs	r3, #23
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	781b      	ldrb	r3, [r3, #0]
}
 8001876:	0018      	movs	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	b006      	add	sp, #24
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	fffffbff 	.word	0xfffffbff

08001884 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800188e:	230f      	movs	r3, #15
 8001890:	18fb      	adds	r3, r7, r3
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	223c      	movs	r2, #60	@ 0x3c
 800189a:	5c9b      	ldrb	r3, [r3, r2]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_TIM_ConfigClockSource+0x20>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e0bc      	b.n	8001a1e <HAL_TIM_ConfigClockSource+0x19a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	223c      	movs	r2, #60	@ 0x3c
 80018a8:	2101      	movs	r1, #1
 80018aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	223d      	movs	r2, #61	@ 0x3d
 80018b0:	2102      	movs	r1, #2
 80018b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2277      	movs	r2, #119	@ 0x77
 80018c0:	4393      	bics	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4a58      	ldr	r2, [pc, #352]	@ (8001a28 <HAL_TIM_ConfigClockSource+0x1a4>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2280      	movs	r2, #128	@ 0x80
 80018da:	0192      	lsls	r2, r2, #6
 80018dc:	4293      	cmp	r3, r2
 80018de:	d040      	beq.n	8001962 <HAL_TIM_ConfigClockSource+0xde>
 80018e0:	2280      	movs	r2, #128	@ 0x80
 80018e2:	0192      	lsls	r2, r2, #6
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d900      	bls.n	80018ea <HAL_TIM_ConfigClockSource+0x66>
 80018e8:	e088      	b.n	80019fc <HAL_TIM_ConfigClockSource+0x178>
 80018ea:	2280      	movs	r2, #128	@ 0x80
 80018ec:	0152      	lsls	r2, r2, #5
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d100      	bne.n	80018f4 <HAL_TIM_ConfigClockSource+0x70>
 80018f2:	e088      	b.n	8001a06 <HAL_TIM_ConfigClockSource+0x182>
 80018f4:	2280      	movs	r2, #128	@ 0x80
 80018f6:	0152      	lsls	r2, r2, #5
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d900      	bls.n	80018fe <HAL_TIM_ConfigClockSource+0x7a>
 80018fc:	e07e      	b.n	80019fc <HAL_TIM_ConfigClockSource+0x178>
 80018fe:	2b70      	cmp	r3, #112	@ 0x70
 8001900:	d018      	beq.n	8001934 <HAL_TIM_ConfigClockSource+0xb0>
 8001902:	d900      	bls.n	8001906 <HAL_TIM_ConfigClockSource+0x82>
 8001904:	e07a      	b.n	80019fc <HAL_TIM_ConfigClockSource+0x178>
 8001906:	2b60      	cmp	r3, #96	@ 0x60
 8001908:	d04f      	beq.n	80019aa <HAL_TIM_ConfigClockSource+0x126>
 800190a:	d900      	bls.n	800190e <HAL_TIM_ConfigClockSource+0x8a>
 800190c:	e076      	b.n	80019fc <HAL_TIM_ConfigClockSource+0x178>
 800190e:	2b50      	cmp	r3, #80	@ 0x50
 8001910:	d03b      	beq.n	800198a <HAL_TIM_ConfigClockSource+0x106>
 8001912:	d900      	bls.n	8001916 <HAL_TIM_ConfigClockSource+0x92>
 8001914:	e072      	b.n	80019fc <HAL_TIM_ConfigClockSource+0x178>
 8001916:	2b40      	cmp	r3, #64	@ 0x40
 8001918:	d057      	beq.n	80019ca <HAL_TIM_ConfigClockSource+0x146>
 800191a:	d900      	bls.n	800191e <HAL_TIM_ConfigClockSource+0x9a>
 800191c:	e06e      	b.n	80019fc <HAL_TIM_ConfigClockSource+0x178>
 800191e:	2b30      	cmp	r3, #48	@ 0x30
 8001920:	d063      	beq.n	80019ea <HAL_TIM_ConfigClockSource+0x166>
 8001922:	d86b      	bhi.n	80019fc <HAL_TIM_ConfigClockSource+0x178>
 8001924:	2b20      	cmp	r3, #32
 8001926:	d060      	beq.n	80019ea <HAL_TIM_ConfigClockSource+0x166>
 8001928:	d868      	bhi.n	80019fc <HAL_TIM_ConfigClockSource+0x178>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d05d      	beq.n	80019ea <HAL_TIM_ConfigClockSource+0x166>
 800192e:	2b10      	cmp	r3, #16
 8001930:	d05b      	beq.n	80019ea <HAL_TIM_ConfigClockSource+0x166>
 8001932:	e063      	b.n	80019fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001944:	f000 fb46 	bl	8001fd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2277      	movs	r2, #119	@ 0x77
 8001954:	4313      	orrs	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	609a      	str	r2, [r3, #8]
      break;
 8001960:	e052      	b.n	8001a08 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001972:	f000 fb2f 	bl	8001fd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2180      	movs	r1, #128	@ 0x80
 8001982:	01c9      	lsls	r1, r1, #7
 8001984:	430a      	orrs	r2, r1
 8001986:	609a      	str	r2, [r3, #8]
      break;
 8001988:	e03e      	b.n	8001a08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001996:	001a      	movs	r2, r3
 8001998:	f000 faa2 	bl	8001ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2150      	movs	r1, #80	@ 0x50
 80019a2:	0018      	movs	r0, r3
 80019a4:	f000 fafc 	bl	8001fa0 <TIM_ITRx_SetConfig>
      break;
 80019a8:	e02e      	b.n	8001a08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019b6:	001a      	movs	r2, r3
 80019b8:	f000 fac0 	bl	8001f3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2160      	movs	r1, #96	@ 0x60
 80019c2:	0018      	movs	r0, r3
 80019c4:	f000 faec 	bl	8001fa0 <TIM_ITRx_SetConfig>
      break;
 80019c8:	e01e      	b.n	8001a08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019d6:	001a      	movs	r2, r3
 80019d8:	f000 fa82 	bl	8001ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2140      	movs	r1, #64	@ 0x40
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 fadc 	bl	8001fa0 <TIM_ITRx_SetConfig>
      break;
 80019e8:	e00e      	b.n	8001a08 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	0019      	movs	r1, r3
 80019f4:	0010      	movs	r0, r2
 80019f6:	f000 fad3 	bl	8001fa0 <TIM_ITRx_SetConfig>
      break;
 80019fa:	e005      	b.n	8001a08 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80019fc:	230f      	movs	r3, #15
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
      break;
 8001a04:	e000      	b.n	8001a08 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001a06:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	223d      	movs	r2, #61	@ 0x3d
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	223c      	movs	r2, #60	@ 0x3c
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]

  return status;
 8001a18:	230f      	movs	r3, #15
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	781b      	ldrb	r3, [r3, #0]
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	ffff00ff 	.word	0xffff00ff

08001a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a32      	ldr	r2, [pc, #200]	@ (8001b08 <TIM_Base_SetConfig+0xdc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d003      	beq.n	8001a4c <TIM_Base_SetConfig+0x20>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a31      	ldr	r2, [pc, #196]	@ (8001b0c <TIM_Base_SetConfig+0xe0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d108      	bne.n	8001a5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2270      	movs	r2, #112	@ 0x70
 8001a50:	4393      	bics	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a29      	ldr	r2, [pc, #164]	@ (8001b08 <TIM_Base_SetConfig+0xdc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00f      	beq.n	8001a86 <TIM_Base_SetConfig+0x5a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a28      	ldr	r2, [pc, #160]	@ (8001b0c <TIM_Base_SetConfig+0xe0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00b      	beq.n	8001a86 <TIM_Base_SetConfig+0x5a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <TIM_Base_SetConfig+0xe4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <TIM_Base_SetConfig+0x5a>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a26      	ldr	r2, [pc, #152]	@ (8001b14 <TIM_Base_SetConfig+0xe8>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d003      	beq.n	8001a86 <TIM_Base_SetConfig+0x5a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <TIM_Base_SetConfig+0xec>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d108      	bne.n	8001a98 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4a24      	ldr	r2, [pc, #144]	@ (8001b1c <TIM_Base_SetConfig+0xf0>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2280      	movs	r2, #128	@ 0x80
 8001a9c:	4393      	bics	r3, r2
 8001a9e:	001a      	movs	r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a11      	ldr	r2, [pc, #68]	@ (8001b08 <TIM_Base_SetConfig+0xdc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <TIM_Base_SetConfig+0xaa>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <TIM_Base_SetConfig+0xe8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d003      	beq.n	8001ad6 <TIM_Base_SetConfig+0xaa>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <TIM_Base_SetConfig+0xec>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d103      	bne.n	8001ade <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d106      	bne.n	8001afe <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4393      	bics	r3, r2
 8001af8:	001a      	movs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	611a      	str	r2, [r3, #16]
  }
}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b004      	add	sp, #16
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	40012c00 	.word	0x40012c00
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	40002000 	.word	0x40002000
 8001b14:	40014400 	.word	0x40014400
 8001b18:	40014800 	.word	0x40014800
 8001b1c:	fffffcff 	.word	0xfffffcff

08001b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4393      	bics	r3, r2
 8001b38:	001a      	movs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2270      	movs	r2, #112	@ 0x70
 8001b4e:	4393      	bics	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2203      	movs	r2, #3
 8001b56:	4393      	bics	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4393      	bics	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a23      	ldr	r2, [pc, #140]	@ (8001c08 <TIM_OC1_SetConfig+0xe8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <TIM_OC1_SetConfig+0x6e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a22      	ldr	r2, [pc, #136]	@ (8001c0c <TIM_OC1_SetConfig+0xec>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <TIM_OC1_SetConfig+0x6e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a21      	ldr	r2, [pc, #132]	@ (8001c10 <TIM_OC1_SetConfig+0xf0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10c      	bne.n	8001ba8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2208      	movs	r2, #8
 8001b92:	4393      	bics	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a17      	ldr	r2, [pc, #92]	@ (8001c08 <TIM_OC1_SetConfig+0xe8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d007      	beq.n	8001bc0 <TIM_OC1_SetConfig+0xa0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a16      	ldr	r2, [pc, #88]	@ (8001c0c <TIM_OC1_SetConfig+0xec>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d003      	beq.n	8001bc0 <TIM_OC1_SetConfig+0xa0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a15      	ldr	r2, [pc, #84]	@ (8001c10 <TIM_OC1_SetConfig+0xf0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d111      	bne.n	8001be4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <TIM_OC1_SetConfig+0xf4>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4a13      	ldr	r2, [pc, #76]	@ (8001c18 <TIM_OC1_SetConfig+0xf8>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	621a      	str	r2, [r3, #32]
}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b006      	add	sp, #24
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	40014400 	.word	0x40014400
 8001c10:	40014800 	.word	0x40014800
 8001c14:	fffffeff 	.word	0xfffffeff
 8001c18:	fffffdff 	.word	0xfffffdff

08001c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	2210      	movs	r2, #16
 8001c32:	4393      	bics	r3, r2
 8001c34:	001a      	movs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4a2c      	ldr	r2, [pc, #176]	@ (8001cfc <TIM_OC2_SetConfig+0xe0>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4a2b      	ldr	r2, [pc, #172]	@ (8001d00 <TIM_OC2_SetConfig+0xe4>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2220      	movs	r2, #32
 8001c66:	4393      	bics	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a22      	ldr	r2, [pc, #136]	@ (8001d04 <TIM_OC2_SetConfig+0xe8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10d      	bne.n	8001c9a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	4393      	bics	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2240      	movs	r2, #64	@ 0x40
 8001c96:	4393      	bics	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	@ (8001d04 <TIM_OC2_SetConfig+0xe8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <TIM_OC2_SetConfig+0x96>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a18      	ldr	r2, [pc, #96]	@ (8001d08 <TIM_OC2_SetConfig+0xec>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d003      	beq.n	8001cb2 <TIM_OC2_SetConfig+0x96>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a17      	ldr	r2, [pc, #92]	@ (8001d0c <TIM_OC2_SetConfig+0xf0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d113      	bne.n	8001cda <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <TIM_OC2_SetConfig+0xf4>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <TIM_OC2_SetConfig+0xf8>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	621a      	str	r2, [r3, #32]
}
 8001cf4:	46c0      	nop			@ (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b006      	add	sp, #24
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	ffff8fff 	.word	0xffff8fff
 8001d00:	fffffcff 	.word	0xfffffcff
 8001d04:	40012c00 	.word	0x40012c00
 8001d08:	40014400 	.word	0x40014400
 8001d0c:	40014800 	.word	0x40014800
 8001d10:	fffffbff 	.word	0xfffffbff
 8001d14:	fffff7ff 	.word	0xfffff7ff

08001d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a31      	ldr	r2, [pc, #196]	@ (8001df4 <TIM_OC3_SetConfig+0xdc>)
 8001d2e:	401a      	ands	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2270      	movs	r2, #112	@ 0x70
 8001d44:	4393      	bics	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4a26      	ldr	r2, [pc, #152]	@ (8001df8 <TIM_OC3_SetConfig+0xe0>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a22      	ldr	r2, [pc, #136]	@ (8001dfc <TIM_OC3_SetConfig+0xe4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d10d      	bne.n	8001d92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <TIM_OC3_SetConfig+0xe8>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e04 <TIM_OC3_SetConfig+0xec>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a19      	ldr	r2, [pc, #100]	@ (8001dfc <TIM_OC3_SetConfig+0xe4>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d007      	beq.n	8001daa <TIM_OC3_SetConfig+0x92>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e08 <TIM_OC3_SetConfig+0xf0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d003      	beq.n	8001daa <TIM_OC3_SetConfig+0x92>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <TIM_OC3_SetConfig+0xf4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d113      	bne.n	8001dd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <TIM_OC3_SetConfig+0xf8>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <TIM_OC3_SetConfig+0xfc>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	621a      	str	r2, [r3, #32]
}
 8001dec:	46c0      	nop			@ (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b006      	add	sp, #24
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	fffffeff 	.word	0xfffffeff
 8001df8:	fffffdff 	.word	0xfffffdff
 8001dfc:	40012c00 	.word	0x40012c00
 8001e00:	fffff7ff 	.word	0xfffff7ff
 8001e04:	fffffbff 	.word	0xfffffbff
 8001e08:	40014400 	.word	0x40014400
 8001e0c:	40014800 	.word	0x40014800
 8001e10:	ffffefff 	.word	0xffffefff
 8001e14:	ffffdfff 	.word	0xffffdfff

08001e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a24      	ldr	r2, [pc, #144]	@ (8001ec0 <TIM_OC4_SetConfig+0xa8>)
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4a20      	ldr	r2, [pc, #128]	@ (8001ec4 <TIM_OC4_SetConfig+0xac>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec8 <TIM_OC4_SetConfig+0xb0>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <TIM_OC4_SetConfig+0xb4>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	031b      	lsls	r3, r3, #12
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a17      	ldr	r2, [pc, #92]	@ (8001ed0 <TIM_OC4_SetConfig+0xb8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d007      	beq.n	8001e88 <TIM_OC4_SetConfig+0x70>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a16      	ldr	r2, [pc, #88]	@ (8001ed4 <TIM_OC4_SetConfig+0xbc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <TIM_OC4_SetConfig+0x70>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <TIM_OC4_SetConfig+0xc0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d109      	bne.n	8001e9c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	4a14      	ldr	r2, [pc, #80]	@ (8001edc <TIM_OC4_SetConfig+0xc4>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	621a      	str	r2, [r3, #32]
}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b006      	add	sp, #24
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	ffffefff 	.word	0xffffefff
 8001ec4:	ffff8fff 	.word	0xffff8fff
 8001ec8:	fffffcff 	.word	0xfffffcff
 8001ecc:	ffffdfff 	.word	0xffffdfff
 8001ed0:	40012c00 	.word	0x40012c00
 8001ed4:	40014400 	.word	0x40014400
 8001ed8:	40014800 	.word	0x40014800
 8001edc:	ffffbfff 	.word	0xffffbfff

08001ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4393      	bics	r3, r2
 8001efa:	001a      	movs	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	22f0      	movs	r2, #240	@ 0xf0
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	220a      	movs	r2, #10
 8001f1c:	4393      	bics	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	621a      	str	r2, [r3, #32]
}
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b006      	add	sp, #24
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	2210      	movs	r2, #16
 8001f54:	4393      	bics	r3, r2
 8001f56:	001a      	movs	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4a0d      	ldr	r2, [pc, #52]	@ (8001f9c <TIM_TI2_ConfigInputStage+0x60>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	031b      	lsls	r3, r3, #12
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	22a0      	movs	r2, #160	@ 0xa0
 8001f78:	4393      	bics	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	621a      	str	r2, [r3, #32]
}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b006      	add	sp, #24
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	ffff0fff 	.word	0xffff0fff

08001fa0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2270      	movs	r2, #112	@ 0x70
 8001fb4:	4393      	bics	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	609a      	str	r2, [r3, #8]
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b004      	add	sp, #16
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4a09      	ldr	r2, [pc, #36]	@ (8002010 <TIM_ETR_SetConfig+0x3c>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	021a      	lsls	r2, r3, #8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	609a      	str	r2, [r3, #8]
}
 8002008:	46c0      	nop			@ (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b006      	add	sp, #24
 800200e:	bd80      	pop	{r7, pc}
 8002010:	ffff00ff 	.word	0xffff00ff

08002014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	221f      	movs	r2, #31
 8002024:	4013      	ands	r3, r2
 8002026:	2201      	movs	r2, #1
 8002028:	409a      	lsls	r2, r3
 800202a:	0013      	movs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	43d2      	mvns	r2, r2
 8002036:	401a      	ands	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	211f      	movs	r1, #31
 8002044:	400b      	ands	r3, r1
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4099      	lsls	r1, r3
 800204a:	000b      	movs	r3, r1
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	621a      	str	r2, [r3, #32]
}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b006      	add	sp, #24
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	223c      	movs	r2, #60	@ 0x3c
 800206a:	5c9b      	ldrb	r3, [r3, r2]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002070:	2302      	movs	r3, #2
 8002072:	e03c      	b.n	80020ee <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	223c      	movs	r2, #60	@ 0x3c
 8002078:	2101      	movs	r1, #1
 800207a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	223d      	movs	r2, #61	@ 0x3d
 8002080:	2102      	movs	r1, #2
 8002082:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2270      	movs	r2, #112	@ 0x70
 8002098:	4393      	bics	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a11      	ldr	r2, [pc, #68]	@ (80020f8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d004      	beq.n	80020c2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0f      	ldr	r2, [pc, #60]	@ (80020fc <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10c      	bne.n	80020dc <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	4393      	bics	r3, r2
 80020c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	223d      	movs	r2, #61	@ 0x3d
 80020e0:	2101      	movs	r1, #1
 80020e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	223c      	movs	r2, #60	@ 0x3c
 80020e8:	2100      	movs	r1, #0
 80020ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b004      	add	sp, #16
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40000400 	.word	0x40000400

08002100 <memset>:
 8002100:	0003      	movs	r3, r0
 8002102:	1882      	adds	r2, r0, r2
 8002104:	4293      	cmp	r3, r2
 8002106:	d100      	bne.n	800210a <memset+0xa>
 8002108:	4770      	bx	lr
 800210a:	7019      	strb	r1, [r3, #0]
 800210c:	3301      	adds	r3, #1
 800210e:	e7f9      	b.n	8002104 <memset+0x4>

08002110 <__libc_init_array>:
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	2600      	movs	r6, #0
 8002114:	4c0c      	ldr	r4, [pc, #48]	@ (8002148 <__libc_init_array+0x38>)
 8002116:	4d0d      	ldr	r5, [pc, #52]	@ (800214c <__libc_init_array+0x3c>)
 8002118:	1b64      	subs	r4, r4, r5
 800211a:	10a4      	asrs	r4, r4, #2
 800211c:	42a6      	cmp	r6, r4
 800211e:	d109      	bne.n	8002134 <__libc_init_array+0x24>
 8002120:	2600      	movs	r6, #0
 8002122:	f000 f819 	bl	8002158 <_init>
 8002126:	4c0a      	ldr	r4, [pc, #40]	@ (8002150 <__libc_init_array+0x40>)
 8002128:	4d0a      	ldr	r5, [pc, #40]	@ (8002154 <__libc_init_array+0x44>)
 800212a:	1b64      	subs	r4, r4, r5
 800212c:	10a4      	asrs	r4, r4, #2
 800212e:	42a6      	cmp	r6, r4
 8002130:	d105      	bne.n	800213e <__libc_init_array+0x2e>
 8002132:	bd70      	pop	{r4, r5, r6, pc}
 8002134:	00b3      	lsls	r3, r6, #2
 8002136:	58eb      	ldr	r3, [r5, r3]
 8002138:	4798      	blx	r3
 800213a:	3601      	adds	r6, #1
 800213c:	e7ee      	b.n	800211c <__libc_init_array+0xc>
 800213e:	00b3      	lsls	r3, r6, #2
 8002140:	58eb      	ldr	r3, [r5, r3]
 8002142:	4798      	blx	r3
 8002144:	3601      	adds	r6, #1
 8002146:	e7f2      	b.n	800212e <__libc_init_array+0x1e>
 8002148:	080021a0 	.word	0x080021a0
 800214c:	080021a0 	.word	0x080021a0
 8002150:	080021a4 	.word	0x080021a4
 8002154:	080021a0 	.word	0x080021a0

08002158 <_init>:
 8002158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800215e:	bc08      	pop	{r3}
 8002160:	469e      	mov	lr, r3
 8002162:	4770      	bx	lr

08002164 <_fini>:
 8002164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800216a:	bc08      	pop	{r3}
 800216c:	469e      	mov	lr, r3
 800216e:	4770      	bx	lr
